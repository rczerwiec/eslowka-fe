import { useSelector } from "react-redux";
import { Modal } from "../../shared/components/Modal";
import { RootState, useCreateWordInFolderMutation, useGetUserFoldersQuery } from "../../shared/store";
import { IFolder, INewWord } from "../../shared/store/slices/FolderSlice";
import { useEffect, useState } from "react";
import { GoogleGenerativeAI} from "@google/generative-ai";
import FolderSelector from "./FolderSelector";
import { toast } from "react-toastify";
import Button from "../../shared/components/Button";
import { Colors } from "../../shared/Enums/Stylings";

interface IProps {
  //is modal visible or not?
  isVisible: boolean;
  //on Modal close
  onClose: () => void;
  //selected word
  word: string;
}

function AIWordModal({ isVisible, onClose, word}: IProps) {
   //current loged user
   const user = useSelector((state: RootState) => state.userProfile);
   //response from api getting all folders
   const response = useGetUserFoldersQuery(user.value);
   //folder from selector
   const [folder, setFolder] = useState<any>();
   //word which user wants to add to folder, formatted as clear word
   const selectedWord = word.replaceAll(",","").replaceAll(")","").replaceAll("(","").replaceAll(".","").replaceAll("?","").replaceAll("!","").replaceAll(`"`,"").replaceAll("`","").replaceAll("'","").replaceAll(":","");
   //word which user wants to add to folder, may be modified by user before adding
   const [formatedWord, setFormatedWord] = useState<string>(selectedWord)
   //word translation from AI or modified by user
   const [translationWord, setTranslationWord] = useState<string>("");
   //createWord api mutation
   const [createWord] = useCreateWordInFolderMutation();
   //setter checks if word translation is already generated by AI
   const [generatedWord,setGeneratedWord] = useState(false);
   //check if AI generation is loading
   const [isLoading, setIsLoading] = useState(false);

  // gemini api key
  const apikey = process.env.REACT_APP_GEMINI_API_KEY;

  //resets the states when user click new word from chat
  useEffect(()=>{
    setTranslationWord("");
    setFormatedWord(selectedWord);
    setGeneratedWord(false);

  },[selectedWord])

   //AI stuff
   let genAI;
   if (apikey !== undefined) {
     genAI = new GoogleGenerativeAI(apikey);
   }
   const model = genAI?.getGenerativeModel({
    model: "gemini-1.5-flash-8b",
  });

  //sets 'translationWord' generated by AI
  const setTranslation = async (word: string) => {
    if(isLoading){
      toast.error("Generowanie danych jest w toku...");
      return;
    }

    setIsLoading(true);
    let translation = "";
    if(model){
      const countResult = await model.countTokens(
        "Przetłumacz słowo:" +
          word +
          " i zapisz tłumaczenie tylko jednym słowem"
      );

      //console.log(countResult.totalTokens);
      if (countResult !== undefined) {
        if (countResult.totalTokens > 850) {
          toast.error("Przekroczono ilość tokenów!");
          return;
        }
      }
      
            
      const result = await model.generateContent("Przetłumacz słowo:"+word+" i zapisz tłumaczenie tylko jednym słowem");
      const response = await result.response;
      translation = response.text().toString();
      //console.log(word);
      setTranslationWord(translation);
      setGeneratedWord(true);
      setIsLoading(false);
    }
  }

  //ADD THIS WORD TO CURRENT SELECTED FOLDER
  const AddWordToFolder = async () => {
    //console.log(folder);
    if(folder){
    let newID = 0;
    if(folder.words.length !== 0 ){
      //console.log("długosc",folder.words.length)
      //console.log("poprzednie id",folder.words[folder.words.length - 1].id)
      newID = (folder.words[folder.words.length - 1].id + 1)
    }
    //console.log("NOWE ID",newID);

    //to eliminate bug with /n in word
    const wordTranslation = translationWord.toString().replaceAll('\n','')
    const wordMain = formatedWord.toString().replaceAll('\n','')
    //create new word object
    const word:INewWord = {
      word: {
        id:newID,
        folderId: folder.id,
        word: wordMain,
        translation: wordTranslation,
        repeated: 0,
        known: 0,
        streak: 0,
        reverseStreak: 0,
        note: "",
      },
      folderID: folder.id,
    }


    return await createWord({newWord:word, userID: user.value})
    .unwrap()
    .then((res) => {
      toast.success("Pomyślnie dodano słówko do folderu!");
      setTranslationWord("");
      setFormatedWord(selectedWord);
      setGeneratedWord(false);
      onClose();
    })
    .catch((err) => {
      toast.success("Błąd podczas dodawania słówka do folderu!");
    });
  }
  }

  //FOLDER SELECTOR list of folders
  let options = [{value:"Ładowanie...", label: "Ładowanie..."}];
  if(response.isSuccess) {
    options = response.data.map((folder: IFolder) => ({ value: folder.folderName, label: folder.folderName }));
  } 
  
  ////////////////////////////////
  return (
    <Modal isVisible={isVisible} onClose={onClose}>
      <div className="relative bg-white/95 backdrop-blur-sm border border-gray-100 shadow-2xl rounded-2xl w-full max-w-md overflow-hidden">
        {/* Content */}
        <div className="p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-secondary to-secondarylight rounded-full mb-4">
              <span className="text-white text-2xl font-bold">+</span>
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Dodaj słówko</h2>
            <p className="text-gray-600">Dodaj nowe słówko do wybranego folderu</p>
          </div>

          {/* Formularz */}
          <div className="space-y-6">
            {/* Pole: Słowo */}
            <div className="space-y-2">
              <label className="block text-sm font-semibold text-gray-700">
                Słowo
              </label>
              <input
                type="text"
                className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-secondary/20 focus:border-secondary transition-all duration-200 outline-none"
                value={formatedWord}
                onChange={(e: any) => setFormatedWord(e.target.value)}
              />
            </div>

            {/* Pole: Tłumaczenie */}
            <div className="space-y-2">
              <label className="block text-sm font-semibold text-gray-700">
                Tłumaczenie
              </label>
              <input
                type="text"
                className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-secondary/20 focus:border-secondary transition-all duration-200 outline-none"
                value={translationWord}
                onChange={(e: any) => setTranslationWord(e.target.value)}
              />
            </div>

            {/* Folder Selector */}
            <div className="relative z-[70]">
              <FolderSelector
                userID={user.value}
                options={options}
                text="Wybierz folder docelowy:"
                setFolder={setFolder}
              />
            </div>

            {/* Przyciski akcji */}
            <div className="flex gap-3">
              {generatedWord ? (
                <>
                  <Button
                    bgColor={Colors.SECONDARY}
                    onClick={() => setTranslation(formatedWord)}
                    className="flex-1 px-4 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-200"
                  >
                    Wygeneruj Ponownie
                  </Button>
                  <Button
                    bgColor={Colors.SECONDARY}
                    onClick={AddWordToFolder}
                    className="flex-1 px-4 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-200"
                  >
                    Dodaj do folderu
                  </Button>
                </>
              ) : (
                <Button
                  bgColor={Colors.SECONDARY}
                  onClick={() => setTranslation(formatedWord)}
                  className="w-full px-4 py-3 rounded-xl font-medium hover:shadow-lg transition-all duration-200"
                >
                  Wygeneruj Tłumaczenie
                </Button>
              )}
            </div>
          </div>
        </div>
      </div>
    </Modal>
  );
}

export default AIWordModal;
