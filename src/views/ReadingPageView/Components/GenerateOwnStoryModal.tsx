import { useState } from "react";
import { Modal } from "../../../shared/components/Modal";
import useModal from "../../../shared/components/Modal/useModal";
import { useSelector } from "react-redux";
import { RootState, useCreateStoryMutation } from "../../../shared/store";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { IStory } from "../../../shared/store/slices/UserSlice";
import { toast } from "react-toastify";
import Button from "../../../shared/components/Button";
import { Colors } from "../../../shared/Enums/Stylings";

interface IModalProps {
    isVisible: boolean;
    onClose: () => void;
    level: string | undefined,
    language: string | undefined,
    allStories: IStory[],
    //add other props if needed
}

function GenerateOwnModal({isVisible, onClose, level,language,allStories}: IModalProps){
  const [storyTitle, setStoryTitle] = useState<string>("");
  const user = useSelector((state: RootState) => state.userProfile);
  const [createStory] = useCreateStoryMutation();
  const [generatedTitle, setGeneratedTitle] = useState<string>("");
  const [generatedWords, setGeneratedWords] = useState<{id: 0, word: string, known: number}[]>([]);
  const [generatedStory, setGeneratedStory] = useState<string>();
  const [generatedDescription, setGeneratedDescription] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const apikey = process.env.REACT_APP_GEMINI_API_KEY;



  //AI stuff
  let genAI;
  if (apikey !== undefined) {
    genAI = new GoogleGenerativeAI(apikey);
  }
  const model = genAI?.getGenerativeModel({
    model: "gemini-1.5-flash-8b",
  });

  if(level === undefined || language === undefined){
    language = "english";
    level = "A1"
  }

  //sets 'translationWord' generated by AI
  const generateStory = async () => {
    if(isLoading){
      toast.error("Generowanie danych jest w toku...");
      return;
    }
    let title = "";
    let story = "";
    let description = "";
    let error = false;
    if (model) {
      setIsLoading(true);
      console.log(
        "Czarek właśnie generuje dla Ciebie historie w języku " +
          language +
          " na poziomie " +
          level +
          ":"
      );
      if(storyTitle==""){

        const countResult = await model.countTokens(
          "Generate a compelling and original story title list that captures the essence of a random genre. The title should be between 2-6 words, be memorable, evoke emotion or curiosity, and include at least one strong descriptive word. Consider using elements like alliteration, metaphor, or contrast to make it more engaging. Provide a brief explanation of why this title would appeal to readers of the chosen genre. Titles should be in " +
            level +
            " " +
            language +
            " language. Answer should contain only the titles seperated with comma"
        );

        //console.log(countResult.totalTokens);
        if (countResult !== undefined) {
          if (countResult.totalTokens > 850) {
            toast.error("Przekroczono ilość tokenów!");
            return;
          }
        }

      await model
        .generateContent(
          "Generate a compelling and original story title list that captures the essence of a random genre. The title should be between 2-6 words, be memorable, evoke emotion or curiosity, and include at least one strong descriptive word. Consider using elements like alliteration, metaphor, or contrast to make it more engaging. Provide a brief explanation of why this title would appeal to readers of the chosen genre. Titles should be in " +
            level +
            " " +
            language +
            " language. Answer should contain only the titles seperated with comma"
        )
        .then((response) => {
          const responseTitle = response.response;
          title = responseTitle.text().toString();
          let titles = title.split(",");
          //console.log(titles);
          title = titles[Math.floor(Math.random() * titles.length)];
          //console.log(title);
        })
        .catch((err) => {
          toast.error(
            "Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!"
          );
          error = true;
        });


      if (error) return;
    }
    else{

      const countResult = await model.countTokens(
 "translate this title:" + storyTitle + " to "+ language + ". Your answer should contain only the translated title"
      );

      //console.log(countResult.totalTokens);
      if (countResult !== undefined) {
        if (countResult.totalTokens > 850) {
          toast.error("Przekroczono ilość tokenów!");
          return;
        }
      }

        await model
        .generateContent(
          "translate this title:" + storyTitle + " to "+ language + ". Your answer should contain only the translated title"
        )
        .then((response) => {
          const responseTitle = response.response;
          title = responseTitle.text().toString();
        })
        .catch((err) => {
          toast.error(
            "Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!"
          );
          error = true;
        });
    }
      let arraysOfWords: any = [];

      const countResult = await model.countTokens(
        "generate story in " +
        language +
        " language at " +
        level +
        " level. The story will be about " +
        title
             );
       
             //console.log(countResult.totalTokens);
             if (countResult !== undefined) {
               if (countResult.totalTokens > 850) {
                 toast.error("Przekroczono ilość tokenów!");
                 return;
               }
             }

      await model
        .generateContent(
          "generate story in " +
            language +
            " language at " +
            level +
            " level. The story will be about " +
            title
        )
        .then((response) => {
          const responseStory = response.response;
          story = responseStory.text().toString();

          //generate story words
          arraysOfWords = story
            .split(/ |\n/)
            .map((word, index) => {
              if (word !== "") {
                const formattedWord = word.replaceAll("\n", "");

                //Check if you already have a word in folder

                return {
                  id: index,
                  word: formattedWord,
                  known: 0,
                };
              }
            })
            .filter((word) => {
              if (word) {
                return true;
              } else {
                return false;
              }
            });

          // Mapa do przechowywania pierwszego id dla każdego unikalnego tytułu
          const titleToId: any = {};

          // Przetwarzanie obiektów, aby ustawić id na takie samo jak pierwsze wystąpienie tytułu
          arraysOfWords.forEach(
            (object: { id: number; word: string; known: number }) => {
              // Jeśli tytuł jeszcze nie ma przypisanego id, przypisz id z pierwszego wystąpienia
              if (titleToId[object.word] === undefined) {
                titleToId[object.word] = object.id;
              } else {
                // Ustaw id na wartość pierwszego wystąpienia
                object.id = titleToId[object.word];
              }
            }
          );

          //console.log(arraysOfWords);
        })
        .catch((err) => {
          toast.error(
            "Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!"
          );
          error = true;
        });

      if (error) return;

      const shortStoryCountResult = await model.countTokens(
        "generate very short description, in " +
        language +
        " for this story: " +
        story
             );
       
             //console.log(shortStoryCountResult.totalTokens);
             if (shortStoryCountResult !== undefined) {
               if (shortStoryCountResult.totalTokens > 850) {
                 toast.error("Przekroczono ilość tokenów!");
                 return;
               }
             }

      await model
        .generateContent(
          "generate very short description, in " +
            language +
            " for this story: " +
            story
        )
        .then((response) => {
          const responseDescription = response.response;
          description = responseDescription.text().toString();
          //console.log(description);
        })
        .catch((err) => {
          toast.error(
            "Czarek jest obecnie przeciążony. Spróbuj ponownie za chwilę!"
          );
          error = true;
        });

      if (error) return;
      setGeneratedTitle(title);
      setGeneratedStory(story);
      setGeneratedWords(arraysOfWords);
      setGeneratedDescription(description);
      setIsLoading(false);
      setStoryTitle("");
    }
  };

  //On story create
  const onCreateStory = async (newStory: IStory) => {
    return await createStory({ newStory: newStory, userID: user.value })
      .unwrap()
      .then(() => {
        toast.success("Pomyślnie utworzono historie!");
      })
      .catch(() => {
        toast.error("Błąd podczas tworzenia historii!");
      });
  };

  return (
<Modal isVisible={isVisible} onClose={onClose}>
  <div className="relative bg-white/95 backdrop-blur-sm border border-gray-100 shadow-2xl rounded-2xl w-full max-w-2xl max-h-[90vh] overflow-hidden z-[100]">
    {/* Header */}
    <div className="bg-gradient-to-r from-secondary to-secondarylight p-6 rounded-t-2xl">
      <div className="text-center">
        <div className="inline-flex items-center justify-center w-16 h-16 bg-white/20 rounded-2xl mb-4">
          <span className="text-white text-3xl">✨</span>
        </div>
        <h2 className="text-2xl font-bold text-white mb-2">Generuj własną historię</h2>
        <p className="text-white/90 text-sm">Stwórz spersonalizowaną historię z AI</p>
      </div>
    </div>

    <div className="p-6 h-full w-full overflow-y-auto">
      <div className="flex flex-col gap-6">
        {generatedDescription === "" ? (
          isLoading ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin w-12 h-12 border-t-4 border-secondary rounded-full mb-4"></div>
              <p className="text-lg font-medium text-gray-600">Czarek generuje historię...</p>
              <p className="text-sm text-gray-500 mt-1">To może chwilę potrwać</p>
            </div>
          ) : (
            <div className="space-y-6">
              <div className="text-center">
                <h3 className="text-xl font-semibold text-gray-800 mb-2">Wpisz tytuł Twojej historii</h3>
                <p className="text-gray-600 mb-3">
                  Tytuł może być wpisany w dowolnym języku. Przetłumaczymy go dla Ciebie.
                </p>
                <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-4">
                  <div className="flex items-center gap-2 text-blue-700">
                    <span className="text-lg">💡</span>
                    <p className="text-sm font-medium">
                      Wybierz poziom i język w menu nawigacji, żeby dopasować poziom i język historii
                    </p>
                  </div>
                </div>
              </div>
              
              <div className="space-y-4">
                <input
                  type="text"
                  placeholder="np. Marta kocha tortille"
                  className="w-full px-4 py-3 bg-gray-50 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-secondary/20 focus:border-secondary transition-all duration-200 outline-none text-lg"
                  value={storyTitle}
                  onChange={(e: any) => {
                    setStoryTitle(e.target.value);
                  }}
                />
                
                <Button
                  onClick={generateStory}
                  bgColor={Colors.SECONDARY}
                  className="w-full flex items-center justify-center gap-3 py-4 px-6 bg-gradient-to-r from-secondary to-secondarylight text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
                >
                  <span className="text-xl">🚀</span>
                  <span>Wygeneruj własną historię</span>
                </Button>
              </div>
            </div>
          )
        ) : (
          isLoading ? (
            <div className="flex flex-col items-center justify-center py-12">
              <div className="animate-spin w-12 h-12 border-t-4 border-secondary rounded-full mb-4"></div>
              <p className="text-lg font-medium text-gray-600">Czarek generuje historię...</p>
              <p className="text-sm text-gray-500 mt-1">To może chwilę potrwać</p>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Podgląd historii */}
              <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-xl p-6">
                <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                  <span>📖</span>
                  <span>Podgląd historii</span>
                </h3>
                
                <div className="space-y-3">
                  <div>
                    <span className="font-semibold text-gray-700">Tytuł:</span>
                    <p className="text-gray-800 font-medium">{generatedTitle}</p>
                  </div>
                  
                  <div>
                    <span className="font-semibold text-gray-700">Opis:</span>
                    <p className="text-gray-800">{generatedDescription}</p>
                  </div>
                  
                  <div className="flex gap-4 text-sm">
                    <div className="flex items-center gap-1">
                      <span className="px-2 py-1 bg-secondary/10 text-secondary rounded-md font-medium">
                        {level || "A1"}
                      </span>
                      <span className="text-gray-600">Poziom</span>
                    </div>
                    <div className="flex items-center gap-1">
                      <span className="px-2 py-1 bg-secondarylight/10 text-secondarylight rounded-md font-medium">
                        {language || "English"}
                      </span>
                      <span className="text-gray-600">Język</span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Nowy tytuł */}
              <div className="space-y-4">
                <h4 className="text-lg font-semibold text-gray-800">Chcesz wygenerować inną historię?</h4>
                <input
                  type="text"
                  placeholder="Wprowadź nowy tytuł..."
                  className="w-full px-4 py-3 bg-gray-50 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-secondary/20 focus:border-secondary transition-all duration-200 outline-none"
                  value={storyTitle}
                  onChange={(e: any) => {
                    setStoryTitle(e.target.value);
                  }}
                />
              </div>

              {/* Przyciski akcji */}
              <div className="flex flex-col sm:flex-row gap-3">
                <Button
                  onClick={generateStory}
                  bgColor={Colors.SECONDARY}
                  className="flex-1 flex items-center justify-center gap-2 py-3 px-4 bg-gradient-to-r from-secondary to-secondarylight text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
                >
                  <span>🔄</span>
                  <span>Wygeneruj ponownie</span>
                </Button>
                
                <Button
                  onClick={() => {
                    let newID = 0;
                    if (allStories.length > 0) {
                      newID = allStories[allStories.length - 1].id + 1;
                    }
                    if (level === undefined || language === undefined) {
                      language = "english";
                      level = "A1";
                    }
                    onCreateStory({
                      id: newID,
                      description: generatedDescription,
                      language: language,
                      level: level,
                      title: generatedTitle,
                      words: generatedWords,
                      wordAmount: 0,
                      wordKnownAmount: 0,
                    });
                    setGeneratedDescription("");
                    setGeneratedStory("");
                    setGeneratedTitle("");
                    onClose();
                  }}
                  bgColor={Colors.SECONDARY}
                  className="flex-1 flex items-center justify-center gap-2 py-3 px-4 bg-gradient-to-r from-green-500 to-green-600 text-white font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-200"
                >
                  <span>✅</span>
                  <span>Dodaj do kolekcji</span>
                </Button>
              </div>
            </div>
          )
        )}
      </div>
    </div>
  </div>
</Modal>
  );
}

export default GenerateOwnModal;